import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

// User class
class User {
    private String userId;
    private String pin;

    public User(String userId, String pin) {
        this.userId = userId;
        this.pin = pin;
    }

    public String getUserId() {
        return userId;
    }

    public String getPin() {
        return pin;
    }
}

// Transaction class
class Transaction {
    private String type;
    private double amount;
    private double balance;
    private String date;

    public Transaction(String type, double amount, double balance) {
        this.type = type;
        this.amount = amount;
        this.balance = balance;
        this.date = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date());
    }

    @Override
    public String toString() {
        return String.format("%s | Amount: %.2f | Balance: %.2f | Date: %s", type, amount, balance, date);
    }
}

// Account class
class Account {
    private double balance;
    private ArrayList<Transaction> transactions;

    public Account(double initialBalance) {
        this.balance = initialBalance;
        this.transactions = new ArrayList<>();
    }

    public double getBalance() {
        return balance;
    }

    public void deposit(double amount) {
        balance += amount;
        transactions.add(new Transaction("Deposit", amount, balance));
    }

    public boolean withdraw(double amount) {
        if (amount <= balance) {
            balance -= amount;
            transactions.add(new Transaction("Withdraw", amount, balance));
            return true;
        }
        return false;
    }

    public boolean transfer(Account target, double amount) {
        if (withdraw(amount)) {
            target.deposit(amount);
            transactions.add(new Transaction("Transfer", amount, balance));
            return true;
        }
        return false;
    }

    public ArrayList<Transaction> getTransactions() {
        return transactions;
    }
}

// TransactionHistory class
class TransactionHistory {
    public static void printHistory(ArrayList<Transaction> transactions) {
        System.out.println("Transaction History:");
        for (Transaction transaction : transactions) {
            System.out.println(transaction);
        }
    }
}

// ATM class
public class ATM {
    private static Map<String, User> users = new HashMap<>();
    private static Map<String, Account> accounts = new HashMap<>();
    
    static {
        // Sample users and accounts (for demonstration purposes)
        users.put("user1", new User("user1", "1234"));
        users.put("user2", new User("user2", "5678"));
        accounts.put("user1", new Account(1000.00));
        accounts.put("user2", new Account(2000.00));
    }
    
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        System.out.println("Welcome to the ATM");
        
        // User login
        User currentUser = login(scanner);
        if (currentUser == null) {
            System.out.println("Invalid user ID or PIN. Exiting...");
            return;
        }
        
        Account userAccount = accounts.get(currentUser.getUserId());
        if (userAccount == null) {
            System.out.println("Account not found. Exiting...");
            return;
        }
        
        // ATM operations
        boolean quit = false;
        while (!quit) {
            System.out.println("\nChoose an option:");
            System.out.println("1. Transactions History");
            System.out.println("2. Withdraw");
            System.out.println("3. Deposit");
            System.out.println("4. Transfer");
            System.out.println("5. Quit");
            int choice = scanner.nextInt();
            
            switch (choice) {
                case 1:
                    TransactionHistory.printHistory(userAccount.getTransactions());
                    break;
                case 2:
                    System.out.print("Enter amount to withdraw: ");
                    double withdrawAmount = scanner.nextDouble();
                    if (userAccount.withdraw(withdrawAmount)) {
                        System.out.println("Withdrawal successful.");
                    } else {
                        System.out.println("Insufficient funds.");
                    }
                    break;
                case 3:
                    System.out.print("Enter amount to deposit: ");
                    double depositAmount = scanner.nextDouble();
                    userAccount.deposit(depositAmount);
                    System.out.println("Deposit successful.");
                    break;
                case 4:
                    System.out.print("Enter target user ID: ");
                    String targetUserId = scanner.next();
                    Account targetAccount = accounts.get(targetUserId);
                    if (targetAccount == null) {
                        System.out.println("Target account not found.");
                        break;
                    }
                    System.out.print("Enter amount to transfer: ");
                    double transferAmount = scanner.nextDouble();
                    if (userAccount.transfer(targetAccount, transferAmount)) {
                        System.out.println("Transfer successful.");
                    } else {
                        System.out.println("Transfer failed. Check your balance.");
                    }
                    break;
                case 5:
                    quit = true;
                    System.out.println("Exiting...");
                    break;
                default:
                    System.out.println("Invalid choice. Please try again.");
                    break;
            }
        }
        
        scanner.close();
    }

    private static User login(Scanner scanner) {
        System.out.print("Enter user ID: ");
        String userId = scanner.next();
        System.out.print("Enter PIN: ");
        String pin = scanner.next();
        
        User user = users.get(userId);
        if (user != null && user.getPin().equals(pin)) {
            return user;
        }
        return null;
    }
}
